<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\Objects\TS-LW-9608.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\Objects\TS-LW-9608.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5060422: Last Updated: Wed Jun 19 13:48:13 2019
<BR><P>
<H3>Maximum Stack Usage =       4632 bytes + Unknown(Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
main &rArr; Controller_Com &rArr; RS485_Task &rArr; Com_Task_TS &rArr; Dev_Frame_Handle &rArr; Dev_Frame_Handle_Self_Comm &rArr; Write_Special_Comm &rArr; Controller_Com_Event_Save &rArr; Record_Controler_If_Event &rArr; Record_Save &rArr; Flash_Blank_Check &rArr; Flash_Read_3String &rArr; Flash_Read_String &rArr; SPI1_ReadWriteByte
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[1]">NMI_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1]">NMI_Handler</a><BR>
 <LI><a href="#[2]">HardFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[2]">HardFault_Handler</a><BR>
 <LI><a href="#[3]">SVC_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[3]">SVC_Handler</a><BR>
 <LI><a href="#[4]">PendSV_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[4]">PendSV_Handler</a><BR>
 <LI><a href="#[5]">SysTick_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[5]">SysTick_Handler</a><BR>
 <LI><a href="#[12]">ADC1_COMP_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[12]">ADC1_COMP_IRQHandler</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[12]">ADC1_COMP_IRQHandler</a> from startup_stm32f0xx.o(.text) referenced from startup_stm32f0xx.o(RESET)
 <LI><a href="#[23]">CEC_IRQHandler</a> from startup_stm32f0xx.o(.text) referenced from startup_stm32f0xx.o(RESET)
 <LI><a href="#[f]">DMA1_Channel1_IRQHandler</a> from startup_stm32f0xx.o(.text) referenced from startup_stm32f0xx.o(RESET)
 <LI><a href="#[10]">DMA1_Channel2_3_IRQHandler</a> from startup_stm32f0xx.o(.text) referenced from startup_stm32f0xx.o(RESET)
 <LI><a href="#[11]">DMA1_Channel4_5_IRQHandler</a> from startup_stm32f0xx.o(.text) referenced from startup_stm32f0xx.o(RESET)
 <LI><a href="#[b]">EXTI0_1_IRQHandler</a> from startup_stm32f0xx.o(.text) referenced from startup_stm32f0xx.o(RESET)
 <LI><a href="#[c]">EXTI2_3_IRQHandler</a> from startup_stm32f0xx.o(.text) referenced from startup_stm32f0xx.o(RESET)
 <LI><a href="#[d]">EXTI4_15_IRQHandler</a> from parallel_port.o(i.EXTI4_15_IRQHandler) referenced from startup_stm32f0xx.o(RESET)
 <LI><a href="#[9]">FLASH_IRQHandler</a> from startup_stm32f0xx.o(.text) referenced from startup_stm32f0xx.o(RESET)
 <LI><a href="#[2]">HardFault_Handler</a> from startup_stm32f0xx.o(.text) referenced from startup_stm32f0xx.o(RESET)
 <LI><a href="#[1c]">I2C1_IRQHandler</a> from startup_stm32f0xx.o(.text) referenced from startup_stm32f0xx.o(RESET)
 <LI><a href="#[1d]">I2C2_IRQHandler</a> from startup_stm32f0xx.o(.text) referenced from startup_stm32f0xx.o(RESET)
 <LI><a href="#[1]">NMI_Handler</a> from startup_stm32f0xx.o(.text) referenced from startup_stm32f0xx.o(RESET)
 <LI><a href="#[7]">PVD_IRQHandler</a> from startup_stm32f0xx.o(.text) referenced from startup_stm32f0xx.o(RESET)
 <LI><a href="#[4]">PendSV_Handler</a> from startup_stm32f0xx.o(.text) referenced from startup_stm32f0xx.o(RESET)
 <LI><a href="#[a]">RCC_IRQHandler</a> from startup_stm32f0xx.o(.text) referenced from startup_stm32f0xx.o(RESET)
 <LI><a href="#[8]">RTC_IRQHandler</a> from startup_stm32f0xx.o(.text) referenced from startup_stm32f0xx.o(RESET)
 <LI><a href="#[0]">Reset_Handler</a> from startup_stm32f0xx.o(.text) referenced from startup_stm32f0xx.o(RESET)
 <LI><a href="#[1e]">SPI1_IRQHandler</a> from startup_stm32f0xx.o(.text) referenced from startup_stm32f0xx.o(RESET)
 <LI><a href="#[1f]">SPI2_IRQHandler</a> from startup_stm32f0xx.o(.text) referenced from startup_stm32f0xx.o(RESET)
 <LI><a href="#[3]">SVC_Handler</a> from startup_stm32f0xx.o(.text) referenced from startup_stm32f0xx.o(RESET)
 <LI><a href="#[5]">SysTick_Handler</a> from startup_stm32f0xx.o(.text) referenced from startup_stm32f0xx.o(RESET)
 <LI><a href="#[25]">SystemInit</a> from system_stm32f0xx.o(i.SystemInit) referenced from startup_stm32f0xx.o(.text)
 <LI><a href="#[18]">TIM14_IRQHandler</a> from timer.o(i.TIM14_IRQHandler) referenced from startup_stm32f0xx.o(RESET)
 <LI><a href="#[19]">TIM15_IRQHandler</a> from startup_stm32f0xx.o(.text) referenced from startup_stm32f0xx.o(RESET)
 <LI><a href="#[1a]">TIM16_IRQHandler</a> from startup_stm32f0xx.o(.text) referenced from startup_stm32f0xx.o(RESET)
 <LI><a href="#[1b]">TIM17_IRQHandler</a> from startup_stm32f0xx.o(.text) referenced from startup_stm32f0xx.o(RESET)
 <LI><a href="#[13]">TIM1_BRK_UP_TRG_COM_IRQHandler</a> from startup_stm32f0xx.o(.text) referenced from startup_stm32f0xx.o(RESET)
 <LI><a href="#[14]">TIM1_CC_IRQHandler</a> from startup_stm32f0xx.o(.text) referenced from startup_stm32f0xx.o(RESET)
 <LI><a href="#[15]">TIM2_IRQHandler</a> from startup_stm32f0xx.o(.text) referenced from startup_stm32f0xx.o(RESET)
 <LI><a href="#[16]">TIM3_IRQHandler</a> from startup_stm32f0xx.o(.text) referenced from startup_stm32f0xx.o(RESET)
 <LI><a href="#[17]">TIM6_DAC_IRQHandler</a> from startup_stm32f0xx.o(.text) referenced from startup_stm32f0xx.o(RESET)
 <LI><a href="#[e]">TS_IRQHandler</a> from startup_stm32f0xx.o(.text) referenced from startup_stm32f0xx.o(RESET)
 <LI><a href="#[20]">USART1_IRQHandler</a> from startup_stm32f0xx.o(.text) referenced from startup_stm32f0xx.o(RESET)
 <LI><a href="#[21]">USART2_IRQHandler</a> from uart.o(i.USART2_IRQHandler) referenced from startup_stm32f0xx.o(RESET)
 <LI><a href="#[22]">USART3_4_IRQHandler</a> from startup_stm32f0xx.o(.text) referenced from startup_stm32f0xx.o(RESET)
 <LI><a href="#[6]">WWDG_IRQHandler</a> from startup_stm32f0xx.o(.text) referenced from startup_stm32f0xx.o(RESET)
 <LI><a href="#[26]">__main</a> from entry.o(.ARM.Collect$$$$00000000) referenced from startup_stm32f0xx.o(.text)
 <LI><a href="#[27]">_sputc</a> from printf1.o(i._sputc) referenced from printf1.o(i.__0sprintf$1)
 <LI><a href="#[24]">main</a> from main.o(i.main) referenced from entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[26]"></a>__main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry.o(.ARM.Collect$$$$00000000))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f0xx.o(.text)
</UL>
<P><STRONG><a name="[fc]"></a>_main_stk</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry2.o(.ARM.Collect$$$$00000001))

<P><STRONG><a name="[28]"></a>_main_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[2f]"></a>__main_after_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Called By]<UL><LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[fd]"></a>_main_clock</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry7b.o(.ARM.Collect$$$$00000008))

<P><STRONG><a name="[fe]"></a>_main_cpp_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry8b.o(.ARM.Collect$$$$0000000A))

<P><STRONG><a name="[ff]"></a>_main_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry9a.o(.ARM.Collect$$$$0000000B))

<P><STRONG><a name="[100]"></a>__rt_final_cpp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry10a.o(.ARM.Collect$$$$0000000D))

<P><STRONG><a name="[101]"></a>__rt_final_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry11a.o(.ARM.Collect$$$$0000000F))

<P><STRONG><a name="[0]"></a>Reset_Handler</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, startup_stm32f0xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f0xx.o(RESET)
</UL>
<P><STRONG><a name="[1]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f0xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f0xx.o(RESET)
</UL>
<P><STRONG><a name="[2]"></a>HardFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f0xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f0xx.o(RESET)
</UL>
<P><STRONG><a name="[3]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f0xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f0xx.o(RESET)
</UL>
<P><STRONG><a name="[4]"></a>PendSV_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f0xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f0xx.o(RESET)
</UL>
<P><STRONG><a name="[5]"></a>SysTick_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f0xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f0xx.o(RESET)
</UL>
<P><STRONG><a name="[12]"></a>ADC1_COMP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f0xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_COMP_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_COMP_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f0xx.o(RESET)
</UL>
<P><STRONG><a name="[23]"></a>CEC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f0xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f0xx.o(RESET)
</UL>
<P><STRONG><a name="[f]"></a>DMA1_Channel1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f0xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f0xx.o(RESET)
</UL>
<P><STRONG><a name="[10]"></a>DMA1_Channel2_3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f0xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f0xx.o(RESET)
</UL>
<P><STRONG><a name="[11]"></a>DMA1_Channel4_5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f0xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f0xx.o(RESET)
</UL>
<P><STRONG><a name="[b]"></a>EXTI0_1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f0xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f0xx.o(RESET)
</UL>
<P><STRONG><a name="[c]"></a>EXTI2_3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f0xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f0xx.o(RESET)
</UL>
<P><STRONG><a name="[9]"></a>FLASH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f0xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f0xx.o(RESET)
</UL>
<P><STRONG><a name="[1c]"></a>I2C1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f0xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f0xx.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>I2C2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f0xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f0xx.o(RESET)
</UL>
<P><STRONG><a name="[7]"></a>PVD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f0xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f0xx.o(RESET)
</UL>
<P><STRONG><a name="[a]"></a>RCC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f0xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f0xx.o(RESET)
</UL>
<P><STRONG><a name="[8]"></a>RTC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f0xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f0xx.o(RESET)
</UL>
<P><STRONG><a name="[1e]"></a>SPI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f0xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f0xx.o(RESET)
</UL>
<P><STRONG><a name="[1f]"></a>SPI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f0xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f0xx.o(RESET)
</UL>
<P><STRONG><a name="[19]"></a>TIM15_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f0xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f0xx.o(RESET)
</UL>
<P><STRONG><a name="[1a]"></a>TIM16_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f0xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f0xx.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>TIM17_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f0xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f0xx.o(RESET)
</UL>
<P><STRONG><a name="[13]"></a>TIM1_BRK_UP_TRG_COM_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f0xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f0xx.o(RESET)
</UL>
<P><STRONG><a name="[14]"></a>TIM1_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f0xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f0xx.o(RESET)
</UL>
<P><STRONG><a name="[15]"></a>TIM2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f0xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f0xx.o(RESET)
</UL>
<P><STRONG><a name="[16]"></a>TIM3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f0xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f0xx.o(RESET)
</UL>
<P><STRONG><a name="[17]"></a>TIM6_DAC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f0xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f0xx.o(RESET)
</UL>
<P><STRONG><a name="[e]"></a>TS_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f0xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f0xx.o(RESET)
</UL>
<P><STRONG><a name="[20]"></a>USART1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f0xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f0xx.o(RESET)
</UL>
<P><STRONG><a name="[22]"></a>USART3_4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f0xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f0xx.o(RESET)
</UL>
<P><STRONG><a name="[6]"></a>WWDG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f0xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f0xx.o(RESET)
</UL>
<P><STRONG><a name="[102]"></a>__aeabi_uidiv</STRONG> (Thumb, 0 bytes, Stack size 12 bytes, uidiv.o(.text), UNUSED)

<P><STRONG><a name="[2b]"></a>__aeabi_uidivmod</STRONG> (Thumb, 44 bytes, Stack size 12 bytes, uidiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = __aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Power_485_Init
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
<LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
</UL>

<P><STRONG><a name="[103]"></a>__aeabi_idiv</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, idiv.o(.text), UNUSED)

<P><STRONG><a name="[2a]"></a>__aeabi_idivmod</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, idiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = __aeabi_idivmod &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hex2BCD
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_Save_Info
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Per_Second_Event_Deal
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Record_Save
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HexToBCD
</UL>

<P><STRONG><a name="[104]"></a>___aeabi_memcpy8$move</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, memmovea.o(.text), UNUSED)

<P><STRONG><a name="[31]"></a>__aeabi_memcpy</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, memmovea.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemoryCpyInvert
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_Save_Info
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_Load_Info
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_Config
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Record_Save
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TS_Get_Controller_Data
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Slave_Info_Send
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Controller_Com_Event_Save
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_Special_Comm
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_Mul_Byte_Reg
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_Slaves_Init_Send
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_Event_To_TransEq
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_Special_Comm
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_MutBlock_Reg_Record
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_Mul_Byte_Reg
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dev_Frame_Analyse
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ans_Updata_Normal
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ans_Process_Normal
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ans_Process_Comm_Ans
<LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Abnormal_Ans_Process
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Com_Task_TS
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TS_Send_Event
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Save_Fault_Info_EI_PRT_B
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Do_Event_Upload
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Slave_Prepare_Answer
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_Module_Info
</UL>

<P><STRONG><a name="[ab]"></a>__aeabi_memcpy4</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, memmovea.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;McuCoreConfig
</UL>

<P><STRONG><a name="[f4]"></a>__aeabi_memmove</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, memmovea.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_memmove
</UL>
<BR>[Called By]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_Special_Comm
</UL>

<P><STRONG><a name="[105]"></a>__aeabi_memmove4</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, memmovea.o(.text), UNUSED)

<P><STRONG><a name="[106]"></a>__aeabi_memmove8</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, memmovea.o(.text), UNUSED)

<P><STRONG><a name="[2d]"></a>__aeabi_memset</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Recover_Factory_Set
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_Config
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Slave_Info_Send
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Controller_Com_Event_Save
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Save_Trans_Equip_Info
<LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset$wrapper
<LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Save_Fire_Info_EI_PRT_B
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Save_Fault_Info_EI_PRT_B
</UL>

<P><STRONG><a name="[107]"></a>__aeabi_memset4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[108]"></a>__aeabi_memset8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[2c]"></a>__aeabi_memclr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Controller_Data_Init
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Recover_Factory_Set
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_Config
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Find_Module_Msg
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_Mul_Byte_Reg
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Parallel_Init
<LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Analyse_Info_TS
</UL>

<P><STRONG><a name="[5e]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_Read_3String
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_Special_Comm
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_MutBlock_Reg_Record
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_Mul_Byte_Reg_Para_Inf
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dev_Frame_Analyse
</UL>

<P><STRONG><a name="[109]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[2e]"></a>_memset$wrapper</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[9b]"></a>strstr</STRONG> (Thumb, 40 bytes, Stack size 12 bytes, strstr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = strstr
</UL>
<BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Save_Fire_Info_EI_PRT_B
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Save_Fault_Info_EI_PRT_B
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Handle_Ei_Pri_B
</UL>

<P><STRONG><a name="[93]"></a>memcmp</STRONG> (Thumb, 26 bytes, Stack size 12 bytes, memcmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_Save_Info
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_Config
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_Special_Comm
</UL>

<P><STRONG><a name="[29]"></a>__scatterload</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, init.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main_after_scatterload
</UL>
<BR>[Called By]<UL><LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_main_scatterload
</UL>

<P><STRONG><a name="[10a]"></a>__scatterload_rt2</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, init.o(.text), UNUSED)

<P><STRONG><a name="[30]"></a>Abnormal_Ans_Process</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, pc_comm.o(i.Abnormal_Ans_Process))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = Abnormal_Ans_Process &rArr; Uart_Slave_Prepare_Send &rArr; Uart_Slaves_Init_Send &rArr; Caculate_CRC
</UL>
<BR>[Calls]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_Slave_Prepare_Send
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_Special_Comm
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_MutBlock_Reg
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_Mul_Byte_Reg
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_Byte_Reg
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_Bit_Reg
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_Special_Comm
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_MutBlock_Reg_Record
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_MutBlock_Reg
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_Mul_Byte_Reg
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_Byte_Reg
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_Bit_Reg
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dev_Frame_Handle_Self_Comm
</UL>

<P><STRONG><a name="[33]"></a>Analyse_Info_TS</STRONG> (Thumb, 724 bytes, Stack size 48 bytes, ts.o(i.Analyse_Info_TS))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = Analyse_Info_TS &rArr; Caculate_CRC
</UL>
<BR>[Calls]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Watch_Dog
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Caculate_CRC
<LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Com_Task_TS
</UL>

<P><STRONG><a name="[37]"></a>Ans_Process_Comm_Ans</STRONG> (Thumb, 248 bytes, Stack size 24 bytes, pc_comm.o(i.Ans_Process_Comm_Ans))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = Ans_Process_Comm_Ans &rArr; Uart_Slaves_Init_Send &rArr; Caculate_CRC
</UL>
<BR>[Calls]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_Slaves_Init_Send
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dev_Frame_Handle
</UL>

<P><STRONG><a name="[39]"></a>Ans_Process_Normal</STRONG> (Thumb, 248 bytes, Stack size 24 bytes, pc_comm.o(i.Ans_Process_Normal))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = Ans_Process_Normal &rArr; Uart_Slaves_Init_Send &rArr; Caculate_CRC
</UL>
<BR>[Calls]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_Slaves_Init_Send
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_Special_Comm
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_Mul_Byte_Reg
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_Byte_Reg
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_Bit_Reg
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_Special_Comm
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_MutBlock_Reg_Record
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_Mul_Byte_Reg_Para_Inf
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_Mul_Byte_Reg
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_Byte_Reg
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_Bit_Reg
</UL>

<P><STRONG><a name="[3a]"></a>Ans_Process_Poll_Normal</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, pc_comm.o(i.Ans_Process_Poll_Normal))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = Ans_Process_Poll_Normal &rArr; Uart_Slave_Prepare_Send &rArr; Uart_Slaves_Init_Send &rArr; Caculate_CRC
</UL>
<BR>[Calls]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_Slave_Prepare_Send
</UL>
<BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_Special_Comm
</UL>

<P><STRONG><a name="[3b]"></a>Ans_Updata_Normal</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, pc_comm.o(i.Ans_Updata_Normal))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = Ans_Updata_Normal &rArr; Uart_Slaves_Init_Send &rArr; Caculate_CRC
</UL>
<BR>[Calls]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_Slaves_Init_Send
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_Special_Comm
</UL>

<P><STRONG><a name="[e7]"></a>BCD2Hex</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, basic.o(i.BCD2Hex))
<BR><BR>[Called By]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_RTC_Time
</UL>

<P><STRONG><a name="[36]"></a>Caculate_CRC</STRONG> (Thumb, 44 bytes, Stack size 12 bytes, ts.o(i.Caculate_CRC))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = Caculate_CRC
</UL>
<BR>[Called By]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_Slaves_Init_Send
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TS_Send_Heart_Poll
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TS_Send_Event
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Slave_Prepare_Answer
<LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Analyse_Info_TS
</UL>

<P><STRONG><a name="[f3]"></a>Change_Byte</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, pc_comm.o(i.Change_Byte))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Change_Byte
</UL>
<BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_Byte_Reg
</UL>

<P><STRONG><a name="[89]"></a>CheckSum_Xor</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, ex_flash.o(i.CheckSum_Xor))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = CheckSum_Xor
</UL>
<BR>[Called By]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_Save_Info
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_Load_Info
</UL>

<P><STRONG><a name="[3c]"></a>Com_Task_TS</STRONG> (Thumb, 102 bytes, Stack size 8 bytes, ts.o(i.Com_Task_TS))
<BR><BR>[Stack]<UL><LI>Max Depth = 4616<LI>Call Chain = Com_Task_TS &rArr; Dev_Frame_Handle &rArr; Dev_Frame_Handle_Self_Comm &rArr; Write_Special_Comm &rArr; Controller_Com_Event_Save &rArr; Record_Controler_If_Event &rArr; Record_Save &rArr; Flash_Blank_Check &rArr; Flash_Read_3String &rArr; Flash_Read_String &rArr; SPI1_ReadWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;On_Led_SEND
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;On_Led_Contor
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dev_Frame_Handle
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dev_Frame_Analyse
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Monitor_Trans_Equip_Fault_Eliminate
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Monitor_Controller_Fault_Eliminate
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Analyse_Info_TS
</UL>
<BR>[Called By]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RS485_Task
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RS232_Task
</UL>

<P><STRONG><a name="[43]"></a>Contr_232Uart_Init</STRONG> (Thumb, 108 bytes, Stack size 24 bytes, uart.o(i.Contr_232Uart_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = Contr_232Uart_Init &rArr; GPIO_PinAFConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinAFConfig
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphClockCmd
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHBPeriphClockCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Controller_Uart_Init
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_Byte_Reg
</UL>

<P><STRONG><a name="[48]"></a>Contr_232Uart_Sta_Switch</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, uart.o(i.Contr_232Uart_Sta_Switch))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = Contr_232Uart_Sta_Switch &rArr; RS232_Uart_Init &rArr; USART_ITConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RS232_Uart_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Controller_Uart_Init
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_Byte_Reg
</UL>

<P><STRONG><a name="[4a]"></a>Contr_485Uart_Init</STRONG> (Thumb, 104 bytes, Stack size 24 bytes, uart.o(i.Contr_485Uart_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = Contr_485Uart_Init &rArr; GPIO_PinAFConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinAFConfig
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphClockCmd
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHBPeriphClockCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Controller_Uart_Init
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_Byte_Reg
</UL>

<P><STRONG><a name="[4b]"></a>Contr_485Uart_Sta_Switch</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, uart.o(i.Contr_485Uart_Sta_Switch))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = Contr_485Uart_Sta_Switch &rArr; RS485_Uart_Init &rArr; USART_ITConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RS485_Uart_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Controller_Uart_Init
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_Byte_Reg
</UL>

<P><STRONG><a name="[4d]"></a>Controller_Com</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, controller.o(i.Controller_Com))
<BR><BR>[Stack]<UL><LI>Max Depth = 4632<LI>Call Chain = Controller_Com &rArr; RS485_Task &rArr; Com_Task_TS &rArr; Dev_Frame_Handle &rArr; Dev_Frame_Handle_Self_Comm &rArr; Write_Special_Comm &rArr; Controller_Com_Event_Save &rArr; Record_Controler_If_Event &rArr; Record_Save &rArr; Flash_Blank_Check &rArr; Flash_Read_3String &rArr; Flash_Read_String &rArr; SPI1_ReadWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RS485_Task
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RS232_Task
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Monitor_Updata
</UL>
<BR>[Called By]<UL><LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[51]"></a>Controller_Com_Event_Save</STRONG> (Thumb, 214 bytes, Stack size 136 bytes, ts.o(i.Controller_Com_Event_Save))
<BR><BR>[Stack]<UL><LI>Max Depth = 4544<LI>Call Chain = Controller_Com_Event_Save &rArr; Record_Controler_If_Event &rArr; Record_Save &rArr; Flash_Blank_Check &rArr; Flash_Read_3String &rArr; Flash_Read_String &rArr; SPI1_ReadWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_EventTypeGroup
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Record_Controler_If_Event
<LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_Special_Comm
</UL>

<P><STRONG><a name="[54]"></a>Controller_Data_Init</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, controller.o(i.Controller_Data_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Controller_Data_Init &rArr; Parallel_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Parallel_Init
<LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mcu_Data_Init
</UL>

<P><STRONG><a name="[56]"></a>Controller_Uart_Init</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, controller.o(i.Controller_Uart_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = Controller_Uart_Init &rArr; Contr_485Uart_Sta_Switch &rArr; RS485_Uart_Init &rArr; USART_ITConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Contr_485Uart_Sta_Switch
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Contr_485Uart_Init
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Contr_232Uart_Sta_Switch
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Contr_232Uart_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mcu_Data_Init
</UL>

<P><STRONG><a name="[f2]"></a>Controller_Uart_Rec_Data</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, uart.o(i.Controller_Uart_Rec_Data))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Controller_Uart_Rec_Data
</UL>
<BR>[Called By]<UL><LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_IRQHandler
</UL>

<P><STRONG><a name="[57]"></a>Controller_Uart_Send_Data</STRONG> (Thumb, 120 bytes, Stack size 16 bytes, uart.o(i.Controller_Uart_Send_Data))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = Controller_Uart_Send_Data &rArr; RS232_Uart_Init &rArr; USART_ITConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RS232_Uart_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_IRQHandler
</UL>

<P><STRONG><a name="[58]"></a>Data_Deal_Task</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, ei_print_comm.o(i.Data_Deal_Task))
<BR><BR>[Stack]<UL><LI>Max Depth = 464<LI>Call Chain = Data_Deal_Task &rArr; Handle_Ei_Pri_B &rArr; Save_Fire_Info_EI_PRT_B &rArr; Do_Event_Upload &rArr; TS_Send_Event &rArr; MemoryCpyInvert &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TS_Send_Heart_Poll
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Parall_Data_Analyse
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Handle_Ei_Pri_B
</UL>
<BR>[Called By]<UL><LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[5c]"></a>Delete_All_Record</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, record_manage.o(i.Delete_All_Record))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = Delete_All_Record &rArr; Flash_Erase_3Addr &rArr; Flash_Sector_Erase &rArr; Flash_Wait_Flash_Idle &rArr; Flash_Read_Status_Register &rArr; SPI1_ReadWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Watch_Dog
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_Erase_3Addr
</UL>
<BR>[Called By]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Recover_Factory_Set
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_Byte_Reg
</UL>

<P><STRONG><a name="[3d]"></a>Dev_Frame_Analyse</STRONG> (Thumb, 928 bytes, Stack size 80 bytes, pc_comm.o(i.Dev_Frame_Analyse))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = Dev_Frame_Analyse &rArr; MemoryCpyInvert &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;addr_compare
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemoryCpyInvert
<LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Module_Msg_Send_Suc
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Module_Msg_Send_Fal
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Frame_Len_Anslyse
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dev_Reg_Mode
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Com_Task_TS
</UL>

<P><STRONG><a name="[40]"></a>Dev_Frame_Handle</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, pc_comm.o(i.Dev_Frame_Handle))
<BR><BR>[Stack]<UL><LI>Max Depth = 4608<LI>Call Chain = Dev_Frame_Handle &rArr; Dev_Frame_Handle_Self_Comm &rArr; Write_Special_Comm &rArr; Controller_Com_Event_Save &rArr; Record_Controler_If_Event &rArr; Record_Save &rArr; Flash_Blank_Check &rArr; Flash_Read_3String &rArr; Flash_Read_String &rArr; SPI1_ReadWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dev_Frame_Handle_Self_Comm
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ans_Process_Comm_Ans
</UL>
<BR>[Called By]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Com_Task_TS
</UL>

<P><STRONG><a name="[65]"></a>Dev_Frame_Handle_Self_Comm</STRONG> (Thumb, 168 bytes, Stack size 8 bytes, pc_comm.o(i.Dev_Frame_Handle_Self_Comm))
<BR><BR>[Stack]<UL><LI>Max Depth = 4600<LI>Call Chain = Dev_Frame_Handle_Self_Comm &rArr; Write_Special_Comm &rArr; Controller_Com_Event_Save &rArr; Record_Controler_If_Event &rArr; Record_Save &rArr; Flash_Blank_Check &rArr; Flash_Read_3String &rArr; Flash_Read_String &rArr; SPI1_ReadWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_Special_Comm
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_MutBlock_Reg
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_Mul_Byte_Reg
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_Byte_Reg
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_Bit_Reg
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_Special_Comm
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_MutBlock_Reg
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_Mul_Byte_Reg
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_Byte_Reg
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_Bit_Reg
<LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Abnormal_Ans_Process
</UL>
<BR>[Called By]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dev_Frame_Handle
</UL>

<P><STRONG><a name="[60]"></a>Dev_Reg_Mode</STRONG> (Thumb, 102 bytes, Stack size 16 bytes, pc_comm.o(i.Dev_Reg_Mode))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = Dev_Reg_Mode &rArr; Dev_Reg_Mode_NBLOCK
</UL>
<BR>[Calls]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dev_Reg_Mode_NBYTE
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dev_Reg_Mode_NBLOCK
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dev_Reg_Mode_2BYTE
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dev_Reg_Mode_1BYTE
</UL>
<BR>[Called By]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dev_Frame_Analyse
</UL>

<P><STRONG><a name="[70]"></a>Dev_Reg_Mode_1BYTE</STRONG> (Thumb, 84 bytes, Stack size 0 bytes, pc_comm.o(i.Dev_Reg_Mode_1BYTE))
<BR><BR>[Called By]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dev_Reg_Mode
</UL>

<P><STRONG><a name="[71]"></a>Dev_Reg_Mode_2BYTE</STRONG> (Thumb, 134 bytes, Stack size 0 bytes, pc_comm.o(i.Dev_Reg_Mode_2BYTE))
<BR><BR>[Called By]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dev_Reg_Mode
</UL>

<P><STRONG><a name="[73]"></a>Dev_Reg_Mode_NBLOCK</STRONG> (Thumb, 366 bytes, Stack size 16 bytes, pc_comm.o(i.Dev_Reg_Mode_NBLOCK))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Dev_Reg_Mode_NBLOCK
</UL>
<BR>[Calls]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uchar_To_Uint16
</UL>
<BR>[Called By]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dev_Reg_Mode
</UL>

<P><STRONG><a name="[72]"></a>Dev_Reg_Mode_NBYTE</STRONG> (Thumb, 418 bytes, Stack size 12 bytes, pc_comm.o(i.Dev_Reg_Mode_NBYTE))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = Dev_Reg_Mode_NBYTE
</UL>
<BR>[Called By]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dev_Reg_Mode
</UL>

<P><STRONG><a name="[75]"></a>Do_Event_Upload</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, ei_print_comm.o(i.Do_Event_Upload))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = Do_Event_Upload &rArr; TS_Send_Event &rArr; MemoryCpyInvert &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TS_Send_Event
</UL>
<BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Save_Fire_Info_EI_PRT_B
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Save_Fault_Info_EI_PRT_B
</UL>

<P><STRONG><a name="[d]"></a>EXTI4_15_IRQHandler</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, parallel_port.o(i.EXTI4_15_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = EXTI4_15_IRQHandler &rArr; Get_Parallel_Data &rArr; Read_IO_Voltage
</UL>
<BR>[Calls]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_ClearITPendingBit
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;On_Led_REC
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Parall_Uart_Rec_Data
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Parallel_Data
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f0xx.o(RESET)
</UL>
<P><STRONG><a name="[7a]"></a>EXTI_ClearITPendingBit</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f0xx_exti.o(i.EXTI_ClearITPendingBit))
<BR><BR>[Called By]<UL><LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI4_15_IRQHandler
</UL>

<P><STRONG><a name="[be]"></a>EXTI_Init</STRONG> (Thumb, 132 bytes, Stack size 0 bytes, stm32f0xx_exti.o(i.EXTI_Init))
<BR><BR>[Called By]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Parallel_Port_EXTI_Init
</UL>

<P><STRONG><a name="[da]"></a>Find_Info_Upload</STRONG> (Thumb, 102 bytes, Stack size 0 bytes, ts.o(i.Find_Info_Upload))
<BR><BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_Special_Comm
</UL>

<P><STRONG><a name="[7b]"></a>Find_Module_Msg</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, ts.o(i.Find_Module_Msg))
<BR><BR>[Stack]<UL><LI>Max Depth = 1032<LI>Call Chain = Find_Module_Msg &rArr; Read_Module_Info &rArr; get_record &rArr; Flash_Load_Info &rArr; Valid_FlashData &rArr; Flash_Read_3String &rArr; Flash_Read_String &rArr; SPI1_ReadWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_Module_Info
</UL>
<BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_Special_Comm
</UL>

<P><STRONG><a name="[7d]"></a>Flash_Blank_Check</STRONG> (Thumb, 58 bytes, Stack size 4112 bytes, ex_flash.o(i.Flash_Blank_Check))
<BR><BR>[Stack]<UL><LI>Max Depth = 4384<LI>Call Chain = Flash_Blank_Check &rArr; Flash_Read_3String &rArr; Flash_Read_String &rArr; SPI1_ReadWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Watch_Dog
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_Read_3String
</UL>
<BR>[Called By]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Record_Save
</UL>

<P><STRONG><a name="[7f]"></a>Flash_Delete_Info_Item</STRONG> (Thumb, 86 bytes, Stack size 24 bytes, ex_flash.o(i.Flash_Delete_Info_Item))
<BR><BR>[Stack]<UL><LI>Max Depth = 408<LI>Call Chain = Flash_Delete_Info_Item &rArr; Flash_Write_3String &rArr; Flash_Write_String &rArr; Flash_Page_Program &rArr; Flash_Read_String &rArr; SPI1_ReadWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_Read_3String
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_Write_3String
</UL>
<BR>[Called By]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_Save_Info
</UL>

<P><STRONG><a name="[81]"></a>Flash_Enable_Write</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, ex_flash.o(i.Flash_Enable_Write))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Flash_Enable_Write &rArr; SPI1_ReadWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI1_ReadWriteByte
</UL>
<BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_Sector_Erase
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_Page_Program
</UL>

<P><STRONG><a name="[5d]"></a>Flash_Erase_3Addr</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, ex_flash.o(i.Flash_Erase_3Addr))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = Flash_Erase_3Addr &rArr; Flash_Sector_Erase &rArr; Flash_Wait_Flash_Idle &rArr; Flash_Read_Status_Register &rArr; SPI1_ReadWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Watch_Dog
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_Sector_Erase
</UL>
<BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delete_All_Record
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Record_Save
</UL>

<P><STRONG><a name="[94]"></a>Flash_Error</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, ex_flash.o(i.Flash_Error))
<BR><BR>[Called By]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_Save_Info
</UL>

<P><STRONG><a name="[84]"></a>Flash_Init</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, ex_flash.o(i.Flash_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = Flash_Init &rArr; SPI_Flash_Init &rArr; GPIO_PinAFConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Flash_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mcu_Hard_Init
</UL>

<P><STRONG><a name="[86]"></a>Flash_Load_Info</STRONG> (Thumb, 240 bytes, Stack size 552 bytes, ex_flash.o(i.Flash_Load_Info))
<BR><BR>[Stack]<UL><LI>Max Depth = 848<LI>Call Chain = Flash_Load_Info &rArr; Valid_FlashData &rArr; Flash_Read_3String &rArr; Flash_Read_String &rArr; SPI1_ReadWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_Read_String
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_Read_3String
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Valid_FlashData
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckSum_Xor
</UL>
<BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_Config
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_record
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_Byte_Reg
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_MutBlock_Reg_Record
</UL>

<P><STRONG><a name="[8a]"></a>Flash_Page_Program</STRONG> (Thumb, 108 bytes, Stack size 280 bytes, ex_flash.o(i.Flash_Page_Program))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = Flash_Page_Program &rArr; Flash_Read_String &rArr; SPI1_ReadWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_Read_String
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI1_ReadWriteByte
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_disable_Write
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_Wait_Flash_Idle
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_Enable_Write
</UL>
<BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_Write_String
</UL>

<P><STRONG><a name="[8d]"></a>Flash_RWrite_String</STRONG> (Thumb, 108 bytes, Stack size 552 bytes, ex_flash.o(i.Flash_RWrite_String))
<BR><BR>[Stack]<UL><LI>Max Depth = 912<LI>Call Chain = Flash_RWrite_String &rArr; Flash_Write_String &rArr; Flash_Page_Program &rArr; Flash_Read_String &rArr; SPI1_ReadWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_Read_String
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Watch_Dog
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_Write_String
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_Sector_Erase
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_Written_Check
</UL>
<BR>[Called By]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_Save_Info
</UL>

<P><STRONG><a name="[7e]"></a>Flash_Read_3String</STRONG> (Thumb, 198 bytes, Stack size 232 bytes, ex_flash.o(i.Flash_Read_3String))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = Flash_Read_3String &rArr; Flash_Read_String &rArr; SPI1_ReadWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_Read_String
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Watch_Dog
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_Save_Info
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_Load_Info
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_Blank_Check
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Valid_FlashData
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Item_To_Wr
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_Delete_Info_Item
</UL>

<P><STRONG><a name="[90]"></a>Flash_Read_Status_Register</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, ex_flash.o(i.Flash_Read_Status_Register))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Flash_Read_Status_Register &rArr; SPI1_ReadWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI1_ReadWriteByte
</UL>
<BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_Wait_Flash_Idle
</UL>

<P><STRONG><a name="[88]"></a>Flash_Read_String</STRONG> (Thumb, 86 bytes, Stack size 24 bytes, ex_flash.o(i.Flash_Read_String))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = Flash_Read_String &rArr; SPI1_ReadWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI1_ReadWriteByte
</UL>
<BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_Load_Info
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_Read_3String
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_RWrite_String
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_Page_Program
</UL>

<P><STRONG><a name="[91]"></a>Flash_Save_Info</STRONG> (Thumb, 456 bytes, Stack size 1064 bytes, ex_flash.o(i.Flash_Save_Info))
<BR><BR>[Stack]<UL><LI>Max Depth = 1976<LI>Call Chain = Flash_Save_Info &rArr; Flash_RWrite_String &rArr; Flash_Write_String &rArr; Flash_Page_Program &rArr; Flash_Read_String &rArr; SPI1_ReadWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_Read_3String
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Item_To_Wr
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_RWrite_String
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_Error
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_Delete_Info_Item
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckSum_Xor
</UL>
<BR>[Called By]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Recover_Factory_Set
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_Config
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Record_Save
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_Mul_Byte_Reg
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_Byte_Reg
</UL>

<P><STRONG><a name="[83]"></a>Flash_Sector_Erase</STRONG> (Thumb, 78 bytes, Stack size 8 bytes, ex_flash.o(i.Flash_Sector_Erase))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = Flash_Sector_Erase &rArr; Flash_Wait_Flash_Idle &rArr; Flash_Read_Status_Register &rArr; SPI1_ReadWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Watch_Dog
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI1_ReadWriteByte
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_disable_Write
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_Wait_Flash_Idle
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_Enable_Write
</UL>
<BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_Erase_3Addr
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Monitor_Updata
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_RWrite_String
</UL>

<P><STRONG><a name="[8b]"></a>Flash_Wait_Flash_Idle</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, ex_flash.o(i.Flash_Wait_Flash_Idle))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = Flash_Wait_Flash_Idle &rArr; Flash_Read_Status_Register &rArr; SPI1_ReadWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_Read_Status_Register
</UL>
<BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_Sector_Erase
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_Page_Program
</UL>

<P><STRONG><a name="[80]"></a>Flash_Write_3String</STRONG> (Thumb, 38 bytes, Stack size 24 bytes, ex_flash.o(i.Flash_Write_3String))
<BR><BR>[Stack]<UL><LI>Max Depth = 384<LI>Call Chain = Flash_Write_3String &rArr; Flash_Write_String &rArr; Flash_Page_Program &rArr; Flash_Read_String &rArr; SPI1_ReadWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_Write_String
</UL>
<BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_Delete_Info_Item
</UL>

<P><STRONG><a name="[8f]"></a>Flash_Write_String</STRONG> (Thumb, 164 bytes, Stack size 40 bytes, ex_flash.o(i.Flash_Write_String))
<BR><BR>[Stack]<UL><LI>Max Depth = 360<LI>Call Chain = Flash_Write_String &rArr; Flash_Page_Program &rArr; Flash_Read_String &rArr; SPI1_ReadWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Watch_Dog
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_Page_Program
</UL>
<BR>[Called By]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_Special_Comm
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_Write_3String
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_RWrite_String
</UL>

<P><STRONG><a name="[8e]"></a>Flash_Written_Check</STRONG> (Thumb, 48 bytes, Stack size 12 bytes, ex_flash.o(i.Flash_Written_Check))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = Flash_Written_Check
</UL>
<BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Item_To_Wr
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_RWrite_String
</UL>

<P><STRONG><a name="[8c]"></a>Flash_disable_Write</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, ex_flash.o(i.Flash_disable_Write))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Flash_disable_Write &rArr; SPI1_ReadWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI1_ReadWriteByte
</UL>
<BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_Sector_Erase
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_Page_Program
</UL>

<P><STRONG><a name="[5f]"></a>Frame_Len_Anslyse</STRONG> (Thumb, 76 bytes, Stack size 12 bytes, pc_comm.o(i.Frame_Len_Anslyse))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = Frame_Len_Anslyse
</UL>
<BR>[Called By]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dev_Frame_Analyse
</UL>

<P><STRONG><a name="[a8]"></a>GPIO_Init</STRONG> (Thumb, 144 bytes, Stack size 20 bytes, stm32f0xx_gpio.o(i.GPIO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RS485_Uart_Init
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RS232_Uart_Init
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Led_Init
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Power_485_Init
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Parallel_Port_IO_Init
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Parallel_Port_EXTI_Init
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Flash_Init
</UL>

<P><STRONG><a name="[46]"></a>GPIO_PinAFConfig</STRONG> (Thumb, 68 bytes, Stack size 20 bytes, stm32f0xx_gpio.o(i.GPIO_PinAFConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = GPIO_PinAFConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Contr_485Uart_Init
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Contr_232Uart_Init
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Power_485_Init
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;McuCoreConfig
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Flash_Init
</UL>

<P><STRONG><a name="[d6]"></a>GPIO_ReadInputDataBit</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f0xx_gpio.o(i.GPIO_ReadInputDataBit))
<BR><BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_IO_Voltage
</UL>

<P><STRONG><a name="[c9]"></a>GPIO_ResetBits</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f0xx_gpio.o(i.GPIO_ResetBits))
<BR><BR>[Called By]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RS485_Uart_Init
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Flash_Init
</UL>

<P><STRONG><a name="[a9]"></a>GPIO_SetBits</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f0xx_gpio.o(i.GPIO_SetBits))
<BR><BR>[Called By]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RS485_Uart_Init
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RS232_Uart_Init
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Led_Init
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Flash_Init
</UL>

<P><STRONG><a name="[52]"></a>Get_EventTypeGroup</STRONG> (Thumb, 58 bytes, Stack size 12 bytes, record_manage.o(i.Get_EventTypeGroup))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = Get_EventTypeGroup
</UL>
<BR>[Calls]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Event_Type_Number
</UL>
<BR>[Called By]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Controller_Com_Event_Save
</UL>

<P><STRONG><a name="[95]"></a>Get_Event_Type_Number</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, record_manage.o(i.Get_Event_Type_Number))
<BR><BR>[Called By]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_EventTypeGroup
</UL>

<P><STRONG><a name="[92]"></a>Get_Item_To_Wr</STRONG> (Thumb, 126 bytes, Stack size 536 bytes, ex_flash.o(i.Get_Item_To_Wr))
<BR><BR>[Stack]<UL><LI>Max Depth = 808<LI>Call Chain = Get_Item_To_Wr &rArr; Flash_Read_3String &rArr; Flash_Read_String &rArr; SPI1_ReadWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Watch_Dog
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_Read_3String
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_Written_Check
</UL>
<BR>[Called By]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_Save_Info
</UL>

<P><STRONG><a name="[77]"></a>Get_Parallel_Data</STRONG> (Thumb, 44 bytes, Stack size 24 bytes, parallel_port.o(i.Get_Parallel_Data))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = Get_Parallel_Data &rArr; Read_IO_Voltage
</UL>
<BR>[Calls]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_IO_Voltage
</UL>
<BR>[Called By]<UL><LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI4_15_IRQHandler
</UL>

<P><STRONG><a name="[97]"></a>Get_RTC_Time</STRONG> (Thumb, 92 bytes, Stack size 8 bytes, rtc.o(i.Get_RTC_Time))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = Get_RTC_Time &rArr; Hex2BCD &rArr; __aeabi_idivmod &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_GetTime
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_GetDate
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hex2BCD
</UL>
<BR>[Called By]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Per_Second_Event_Deal
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Record_Save
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_Mul_Byte_Reg
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Save_Fault_Info_EI_PRT_B
</UL>

<P><STRONG><a name="[5a]"></a>Handle_Ei_Pri_B</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, ei_print_comm.o(i.Handle_Ei_Pri_B))
<BR><BR>[Stack]<UL><LI>Max Depth = 456<LI>Call Chain = Handle_Ei_Pri_B &rArr; Save_Fire_Info_EI_PRT_B &rArr; Do_Event_Upload &rArr; TS_Send_Event &rArr; MemoryCpyInvert &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strstr
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Save_Fire_Info_EI_PRT_B
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Save_Fault_Info_EI_PRT_B
</UL>
<BR>[Called By]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Data_Deal_Task
</UL>

<P><STRONG><a name="[99]"></a>Hex2BCD</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, basic.o(i.Hex2BCD))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = Hex2BCD &rArr; __aeabi_idivmod &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Get_PowerOff_Time
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_RTC_Time
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hex_To_BasicUC
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Save_Fire_Info_EI_PRT_B
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Save_Fault_Info_EI_PRT_B
</UL>

<P><STRONG><a name="[9e]"></a>HexToBCD</STRONG> (Thumb, 56 bytes, Stack size 24 bytes, controller.o(i.HexToBCD))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = HexToBCD &rArr; __aeabi_idivmod &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hex_To_BasicUC
</UL>

<P><STRONG><a name="[9f]"></a>Hex_To_BasicUC</STRONG> (Thumb, 70 bytes, Stack size 32 bytes, controller.o(i.Hex_To_BasicUC))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = Hex_To_BasicUC &rArr; HexToBCD &rArr; __aeabi_idivmod &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hex2BCD
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HexToBCD
</UL>
<BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Save_Fire_Info_EI_PRT_B
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Save_Fault_Info_EI_PRT_B
</UL>

<P><STRONG><a name="[a6]"></a>IWDG_Enable</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f0xx_iwdg.o(i.IWDG_Enable))
<BR><BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_WATCHDOG
</UL>

<P><STRONG><a name="[a5]"></a>IWDG_ReloadCounter</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f0xx_iwdg.o(i.IWDG_ReloadCounter))
<BR><BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_WATCHDOG
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Watch_Dog
</UL>

<P><STRONG><a name="[a3]"></a>IWDG_SetPrescaler</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f0xx_iwdg.o(i.IWDG_SetPrescaler))
<BR><BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_WATCHDOG
</UL>

<P><STRONG><a name="[a4]"></a>IWDG_SetReload</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f0xx_iwdg.o(i.IWDG_SetReload))
<BR><BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_WATCHDOG
</UL>

<P><STRONG><a name="[a2]"></a>IWDG_WriteAccessCmd</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f0xx_iwdg.o(i.IWDG_WriteAccessCmd))
<BR><BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_WATCHDOG
</UL>

<P><STRONG><a name="[a0]"></a>Init_Config</STRONG> (Thumb, 286 bytes, Stack size 8 bytes, sys_init.o(i.Init_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 1984<LI>Call Chain = Init_Config &rArr; Flash_Save_Info &rArr; Flash_RWrite_String &rArr; Flash_Write_String &rArr; Flash_Page_Program &rArr; Flash_Read_String &rArr; SPI1_ReadWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_Save_Info
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_Load_Info
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
<LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mcu_Data_Init
</UL>

<P><STRONG><a name="[a1]"></a>Init_WATCHDOG</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, sys_init.o(i.Init_WATCHDOG))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Init_WATCHDOG
</UL>
<BR>[Calls]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IWDG_WriteAccessCmd
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IWDG_SetReload
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IWDG_SetPrescaler
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IWDG_ReloadCounter
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IWDG_Enable
</UL>
<BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mcu_Hard_Init
</UL>

<P><STRONG><a name="[a7]"></a>Led_Init</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, led.o(i.Led_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = Led_Init &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHBPeriphClockCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mcu_Hard_Init
</UL>

<P><STRONG><a name="[aa]"></a>McuCoreConfig</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, sys_init.o(i.McuCoreConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = McuCoreConfig &rArr; GPIO_PinAFConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinAFConfig
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSCFG_MemoryRemapConfig
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;System_Initialize
</UL>

<P><STRONG><a name="[ad]"></a>Mcu_Data_Init</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, sys_init.o(i.Mcu_Data_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 1992<LI>Call Chain = Mcu_Data_Init &rArr; Init_Config &rArr; Flash_Save_Info &rArr; Flash_RWrite_String &rArr; Flash_Write_String &rArr; Flash_Page_Program &rArr; Flash_Read_String &rArr; SPI1_ReadWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Controller_Uart_Init
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Controller_Data_Init
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_Config
</UL>
<BR>[Called By]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;System_Initialize
</UL>

<P><STRONG><a name="[ae]"></a>Mcu_Hard_Init</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, sys_init.o(i.Mcu_Hard_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = Mcu_Hard_Init &rArr; Power_485_Init &rArr; GPIO_PinAFConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Parallel_Port_Init
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Led_Init
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_Init
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Power_485_Init
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_WATCHDOG
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer14_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;System_Initialize
</UL>

<P><STRONG><a name="[61]"></a>MemoryCpyInvert</STRONG> (Thumb, 58 bytes, Stack size 56 bytes, basic.o(i.MemoryCpyInvert))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = MemoryCpyInvert &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Record_Save
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TS_Get_Controller_Data
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Slave_Info_Send
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_Mul_Byte_Reg
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_Special_Comm
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_Mul_Byte_Reg
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dev_Frame_Analyse
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Save_Trans_Equip_Info
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TS_Send_Event
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Save_Fire_Info_EI_PRT_B
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Save_Fault_Info_EI_PRT_B
</UL>

<P><STRONG><a name="[63]"></a>Module_Msg_Send_Fal</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, ts.o(i.Module_Msg_Send_Fal))
<BR><BR>[Called By]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dev_Frame_Analyse
</UL>

<P><STRONG><a name="[64]"></a>Module_Msg_Send_Suc</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, ts.o(i.Module_Msg_Send_Suc))
<BR><BR>[Called By]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dev_Frame_Analyse
</UL>

<P><STRONG><a name="[41]"></a>Monitor_Controller_Fault_Eliminate</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, controller.o(i.Monitor_Controller_Fault_Eliminate))
<BR><BR>[Called By]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Com_Task_TS
</UL>

<P><STRONG><a name="[b4]"></a>Monitor_Controller_Slave_Uart</STRONG> (Thumb, 76 bytes, Stack size 0 bytes, controller.o(i.Monitor_Controller_Slave_Uart))
<BR><BR>[Called By]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Monitor_Task
</UL>

<P><STRONG><a name="[b3]"></a>Monitor_Controller_Uart</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, controller.o(i.Monitor_Controller_Uart))
<BR><BR>[Called By]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Monitor_Task
</UL>

<P><STRONG><a name="[ed]"></a>Monitor_Controller_Uart_Timer_Run</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, controller.o(i.Monitor_Controller_Uart_Timer_Run))
<BR><BR>[Called By]<UL><LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM14_IRQHandler
</UL>

<P><STRONG><a name="[ee]"></a>Monitor_Led</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, led.o(i.Monitor_Led))
<BR><BR>[Called By]<UL><LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM14_IRQHandler
</UL>

<P><STRONG><a name="[b2]"></a>Monitor_Task</STRONG> (Thumb, 130 bytes, Stack size 8 bytes, timer.o(i.Monitor_Task))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = Monitor_Task &rArr; Per_Second_Event_Deal &rArr; Get_RTC_Time &rArr; Hex2BCD &rArr; __aeabi_idivmod &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Off_Led_SEND
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Off_Led_REC
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Monitor_Controller_Uart
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Monitor_Controller_Slave_Uart
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Per_Second_Event_Deal
</UL>
<BR>[Called By]<UL><LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[42]"></a>Monitor_Trans_Equip_Fault_Eliminate</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, controller.o(i.Monitor_Trans_Equip_Fault_Eliminate))
<BR><BR>[Stack]<UL><LI>Max Depth = 4552<LI>Call Chain = Monitor_Trans_Equip_Fault_Eliminate &rArr; Save_Trans_Equip_Info &rArr; Record_Controler_If_Event &rArr; Record_Save &rArr; Flash_Blank_Check &rArr; Flash_Read_3String &rArr; Flash_Read_String &rArr; SPI1_ReadWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Off_Led_Error
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Save_Trans_Equip_Info
</UL>
<BR>[Called By]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Com_Task_TS
</UL>

<P><STRONG><a name="[50]"></a>Monitor_Updata</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, controller.o(i.Monitor_Updata))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = Monitor_Updata &rArr; Flash_Sector_Erase &rArr; Flash_Wait_Flash_Idle &rArr; Flash_Read_Status_Register &rArr; SPI1_ReadWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Soft_Reset
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Watch_Dog
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_Sector_Erase
</UL>
<BR>[Called By]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Controller_Com
</UL>

<P><STRONG><a name="[47]"></a>NVIC_Init</STRONG> (Thumb, 106 bytes, Stack size 0 bytes, stm32f0xx_misc.o(i.NVIC_Init))
<BR><BR>[Called By]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Contr_485Uart_Init
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Contr_232Uart_Init
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer14_Init
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Parallel_Port_EXTI_Init
</UL>

<P><STRONG><a name="[f5]"></a>Off_Led_Contor</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, led.o(i.Off_Led_Contor))
<BR><BR>[Called By]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_Special_Comm
</UL>

<P><STRONG><a name="[b9]"></a>Off_Led_Error</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, led.o(i.Off_Led_Error))
<BR><BR>[Called By]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_Special_Comm
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Monitor_Trans_Equip_Fault_Eliminate
</UL>

<P><STRONG><a name="[b5]"></a>Off_Led_REC</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, led.o(i.Off_Led_REC))
<BR><BR>[Called By]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Monitor_Task
</UL>

<P><STRONG><a name="[b6]"></a>Off_Led_SEND</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, led.o(i.Off_Led_SEND))
<BR><BR>[Called By]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Monitor_Task
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_Special_Comm
</UL>

<P><STRONG><a name="[3f]"></a>On_Led_Contor</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, led.o(i.On_Led_Contor))
<BR><BR>[Called By]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_Special_Comm
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Com_Task_TS
</UL>

<P><STRONG><a name="[f6]"></a>On_Led_Error</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, led.o(i.On_Led_Error))
<BR><BR>[Called By]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_Special_Comm
</UL>

<P><STRONG><a name="[79]"></a>On_Led_REC</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, led.o(i.On_Led_REC))
<BR><BR>[Called By]<UL><LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI4_15_IRQHandler
</UL>

<P><STRONG><a name="[3e]"></a>On_Led_SEND</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, led.o(i.On_Led_SEND))
<BR><BR>[Called By]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_Special_Comm
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Com_Task_TS
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RS232_Task
</UL>

<P><STRONG><a name="[cc]"></a>PWR_BackupAccessCmd</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, stm32f0xx_pwr.o(i.PWR_BackupAccessCmd))
<BR><BR>[Called By]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_TimeRegulate
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Get_PowerOff_Time
</UL>

<P><STRONG><a name="[59]"></a>Parall_Data_Analyse</STRONG> (Thumb, 448 bytes, Stack size 40 bytes, ei_print_comm.o(i.Parall_Data_Analyse))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = Parall_Data_Analyse &rArr; Watch_Dog
</UL>
<BR>[Calls]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Watch_Dog
</UL>
<BR>[Called By]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Data_Deal_Task
</UL>

<P><STRONG><a name="[78]"></a>Parall_Uart_Rec_Data</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, ei_print_comm.o(i.Parall_Uart_Rec_Data))
<BR><BR>[Called By]<UL><LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI4_15_IRQHandler
</UL>

<P><STRONG><a name="[55]"></a>Parallel_Init</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, ei_print_comm.o(i.Parallel_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Parallel_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Controller_Data_Init
</UL>

<P><STRONG><a name="[bb]"></a>Parallel_Port_EXTI_Init</STRONG> (Thumb, 100 bytes, Stack size 24 bytes, parallel_port.o(i.Parallel_Port_EXTI_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = Parallel_Port_EXTI_Init &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_Init
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSCFG_EXTILineConfig
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHBPeriphClockCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Parallel_Port_Init
</UL>

<P><STRONG><a name="[bf]"></a>Parallel_Port_IO_Init</STRONG> (Thumb, 126 bytes, Stack size 16 bytes, parallel_port.o(i.Parallel_Port_IO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = Parallel_Port_IO_Init &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHBPeriphClockCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Parallel_Port_Init
</UL>

<P><STRONG><a name="[b1]"></a>Parallel_Port_Init</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, parallel_port.o(i.Parallel_Port_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = Parallel_Port_Init &rArr; Parallel_Port_EXTI_Init &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Parallel_Port_IO_Init
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Parallel_Port_EXTI_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mcu_Hard_Init
</UL>

<P><STRONG><a name="[b7]"></a>Per_Second_Event_Deal</STRONG> (Thumb, 108 bytes, Stack size 8 bytes, timer.o(i.Per_Second_Event_Deal))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = Per_Second_Event_Deal &rArr; Get_RTC_Time &rArr; Hex2BCD &rArr; __aeabi_idivmod &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_RTC_Time
<LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
<LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Monitor_Task
</UL>

<P><STRONG><a name="[b0]"></a>Power_485_Init</STRONG> (Thumb, 240 bytes, Stack size 64 bytes, sys_init.o(i.Power_485_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = Power_485_Init &rArr; GPIO_PinAFConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinAFConfig
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHBPeriphClockCmd
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_TimeBaseInit
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC3Init
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC2Init
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC1Init
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_CtrlPWMOutputs
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Cmd
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_BDTRConfig
<LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mcu_Hard_Init
</UL>

<P><STRONG><a name="[44]"></a>RCC_AHBPeriphClockCmd</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, stm32f0xx_rcc.o(i.RCC_AHBPeriphClockCmd))
<BR><BR>[Called By]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RS485_Uart_Init
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Contr_485Uart_Init
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Contr_232Uart_Init
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Led_Init
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Power_485_Init
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Parallel_Port_IO_Init
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Parallel_Port_EXTI_Init
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Flash_Init
</UL>

<P><STRONG><a name="[45]"></a>RCC_APB1PeriphClockCmd</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, stm32f0xx_rcc.o(i.RCC_APB1PeriphClockCmd))
<BR><BR>[Called By]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Contr_485Uart_Init
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Contr_232Uart_Init
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer14_Init
</UL>

<P><STRONG><a name="[bc]"></a>RCC_APB2PeriphClockCmd</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, stm32f0xx_rcc.o(i.RCC_APB2PeriphClockCmd))
<BR><BR>[Called By]<UL><LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Power_485_Init
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Parallel_Port_EXTI_Init
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Flash_Init
</UL>

<P><STRONG><a name="[4e]"></a>RS232_Task</STRONG> (Thumb, 106 bytes, Stack size 8 bytes, controller.o(i.RS232_Task))
<BR><BR>[Stack]<UL><LI>Max Depth = 4624<LI>Call Chain = RS232_Task &rArr; Com_Task_TS &rArr; Dev_Frame_Handle &rArr; Dev_Frame_Handle_Self_Comm &rArr; Write_Special_Comm &rArr; Controller_Com_Event_Save &rArr; Record_Controler_If_Event &rArr; Record_Save &rArr; Flash_Blank_Check &rArr; Flash_Read_3String &rArr; Flash_Read_String &rArr; SPI1_ReadWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;On_Led_SEND
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Com_Task_TS
</UL>
<BR>[Called By]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Controller_Com
</UL>

<P><STRONG><a name="[49]"></a>RS232_Uart_Init</STRONG> (Thumb, 502 bytes, Stack size 16 bytes, uart.o(i.RS232_Uart_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = RS232_Uart_Init &rArr; USART_ITConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ITConfig
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Controller_Uart_Send_Data
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Contr_232Uart_Sta_Switch
</UL>

<P><STRONG><a name="[4f]"></a>RS485_Task</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, controller.o(i.RS485_Task))
<BR><BR>[Stack]<UL><LI>Max Depth = 4624<LI>Call Chain = RS485_Task &rArr; Com_Task_TS &rArr; Dev_Frame_Handle &rArr; Dev_Frame_Handle_Self_Comm &rArr; Write_Special_Comm &rArr; Controller_Com_Event_Save &rArr; Record_Controler_If_Event &rArr; Record_Save &rArr; Flash_Blank_Check &rArr; Flash_Read_3String &rArr; Flash_Read_String &rArr; SPI1_ReadWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Com_Task_TS
</UL>
<BR>[Called By]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Controller_Com
</UL>

<P><STRONG><a name="[4c]"></a>RS485_Uart_Init</STRONG> (Thumb, 606 bytes, Stack size 16 bytes, uart.o(i.RS485_Uart_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = RS485_Uart_Init &rArr; USART_ITConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHBPeriphClockCmd
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ITConfig
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Contr_485Uart_Sta_Switch
</UL>

<P><STRONG><a name="[d0]"></a>RTC_EnterInitMode</STRONG> (Thumb, 82 bytes, Stack size 8 bytes, stm32f0xx_rtc.o(i.RTC_EnterInitMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = RTC_EnterInitMode
</UL>
<BR>[Called By]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_SetTime
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_SetDate
</UL>

<P><STRONG><a name="[d1]"></a>RTC_ExitInitMode</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32f0xx_rtc.o(i.RTC_ExitInitMode))
<BR><BR>[Called By]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_SetTime
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_SetDate
</UL>

<P><STRONG><a name="[9a]"></a>RTC_GetDate</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, stm32f0xx_rtc.o(i.RTC_GetDate))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = RTC_GetDate
</UL>
<BR>[Calls]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Bcd2ToByte
</UL>
<BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_RTC_Time
</UL>

<P><STRONG><a name="[98]"></a>RTC_GetTime</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, stm32f0xx_rtc.o(i.RTC_GetTime))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = RTC_GetTime
</UL>
<BR>[Calls]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Bcd2ToByte
</UL>
<BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_RTC_Time
</UL>

<P><STRONG><a name="[cb]"></a>RTC_Get_PowerOff_Time</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, rtc.o(i.RTC_Get_PowerOff_Time))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = RTC_Get_PowerOff_Time &rArr; Hex2BCD &rArr; __aeabi_idivmod &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWR_BackupAccessCmd
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_ReadBackupRegister
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hex2BCD
</UL>
<BR>[Called By]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Record_Save
</UL>

<P><STRONG><a name="[cd]"></a>RTC_ReadBackupRegister</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, stm32f0xx_rtc.o(i.RTC_ReadBackupRegister))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = RTC_ReadBackupRegister
</UL>
<BR>[Called By]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Get_PowerOff_Time
</UL>

<P><STRONG><a name="[ce]"></a>RTC_SetDate</STRONG> (Thumb, 198 bytes, Stack size 24 bytes, stm32f0xx_rtc.o(i.RTC_SetDate))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = RTC_SetDate &rArr; RTC_WaitForSynchro
</UL>
<BR>[Calls]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_WaitForSynchro
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_ExitInitMode
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_EnterInitMode
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_ByteToBcd2
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Bcd2ToByte
</UL>
<BR>[Called By]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_TimeRegulate
</UL>

<P><STRONG><a name="[d3]"></a>RTC_SetTime</STRONG> (Thumb, 208 bytes, Stack size 24 bytes, stm32f0xx_rtc.o(i.RTC_SetTime))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = RTC_SetTime &rArr; RTC_WaitForSynchro
</UL>
<BR>[Calls]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_WaitForSynchro
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_ExitInitMode
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_EnterInitMode
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_ByteToBcd2
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Bcd2ToByte
</UL>
<BR>[Called By]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_TimeRegulate
</UL>

<P><STRONG><a name="[d4]"></a>RTC_TimeRegulate</STRONG> (Thumb, 90 bytes, Stack size 24 bytes, rtc.o(i.RTC_TimeRegulate))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = RTC_TimeRegulate &rArr; RTC_SetTime &rArr; RTC_WaitForSynchro
</UL>
<BR>[Calls]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWR_BackupAccessCmd
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_WriteBackupRegister
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_SetTime
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_SetDate
</UL>
<BR>[Called By]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_RTC_Time
</UL>

<P><STRONG><a name="[d2]"></a>RTC_WaitForSynchro</STRONG> (Thumb, 104 bytes, Stack size 8 bytes, stm32f0xx_rtc.o(i.RTC_WaitForSynchro))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = RTC_WaitForSynchro
</UL>
<BR>[Called By]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_SetTime
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_SetDate
</UL>

<P><STRONG><a name="[d5]"></a>RTC_WriteBackupRegister</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, stm32f0xx_rtc.o(i.RTC_WriteBackupRegister))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = RTC_WriteBackupRegister
</UL>
<BR>[Called By]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_TimeRegulate
</UL>

<P><STRONG><a name="[69]"></a>Read_Bit_Reg</STRONG> (Thumb, 352 bytes, Stack size 16 bytes, pc_comm.o(i.Read_Bit_Reg))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = Read_Bit_Reg &rArr; Abnormal_Ans_Process &rArr; Uart_Slave_Prepare_Send &rArr; Uart_Slaves_Init_Send &rArr; Caculate_CRC
</UL>
<BR>[Calls]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ans_Process_Normal
<LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Abnormal_Ans_Process
</UL>
<BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dev_Frame_Handle_Self_Comm
</UL>

<P><STRONG><a name="[6b]"></a>Read_Byte_Reg</STRONG> (Thumb, 154 bytes, Stack size 16 bytes, pc_comm.o(i.Read_Byte_Reg))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = Read_Byte_Reg &rArr; Abnormal_Ans_Process &rArr; Uart_Slave_Prepare_Send &rArr; Uart_Slaves_Init_Send &rArr; Caculate_CRC
</UL>
<BR>[Calls]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ans_Process_Normal
<LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Abnormal_Ans_Process
</UL>
<BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dev_Frame_Handle_Self_Comm
</UL>

<P><STRONG><a name="[96]"></a>Read_IO_Voltage</STRONG> (Thumb, 234 bytes, Stack size 16 bytes, parallel_port.o(i.Read_IO_Voltage))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Read_IO_Voltage
</UL>
<BR>[Calls]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadInputDataBit
</UL>
<BR>[Called By]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Parallel_Data
</UL>

<P><STRONG><a name="[7c]"></a>Read_Module_Info</STRONG> (Thumb, 164 bytes, Stack size 152 bytes, ts.o(i.Read_Module_Info))
<BR><BR>[Stack]<UL><LI>Max Depth = 1016<LI>Call Chain = Read_Module_Info &rArr; get_record &rArr; Flash_Load_Info &rArr; Valid_FlashData &rArr; Flash_Read_3String &rArr; Flash_Read_String &rArr; SPI1_ReadWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Watch_Dog
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_record
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Find_Module_Msg
</UL>

<P><STRONG><a name="[6d]"></a>Read_Mul_Byte_Reg</STRONG> (Thumb, 830 bytes, Stack size 152 bytes, pc_comm.o(i.Read_Mul_Byte_Reg))
<BR><BR>[Stack]<UL><LI>Max Depth = 292<LI>Call Chain = Read_Mul_Byte_Reg &rArr; Read_Mul_Byte_Reg_Para_Inf &rArr; Ans_Process_Normal &rArr; Uart_Slaves_Init_Send &rArr; Caculate_CRC
</UL>
<BR>[Calls]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemoryCpyInvert
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_Mul_Byte_Reg_Para_Inf
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ans_Process_Normal
<LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Abnormal_Ans_Process
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dev_Frame_Handle_Self_Comm
</UL>

<P><STRONG><a name="[d8]"></a>Read_Mul_Byte_Reg_Para_Inf</STRONG> (Thumb, 40 bytes, Stack size 80 bytes, pc_comm.o(i.Read_Mul_Byte_Reg_Para_Inf))
<BR><BR>[Stack]<UL><LI>Max Depth = 140<LI>Call Chain = Read_Mul_Byte_Reg_Para_Inf &rArr; Ans_Process_Normal &rArr; Uart_Slaves_Init_Send &rArr; Caculate_CRC
</UL>
<BR>[Calls]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ans_Process_Normal
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_Mul_Byte_Reg
</UL>

<P><STRONG><a name="[6f]"></a>Read_MutBlock_Reg</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, pc_comm.o(i.Read_MutBlock_Reg))
<BR><BR>[Stack]<UL><LI>Max Depth = 1400<LI>Call Chain = Read_MutBlock_Reg &rArr; Read_MutBlock_Reg_Record &rArr; Flash_Load_Info &rArr; Valid_FlashData &rArr; Flash_Read_3String &rArr; Flash_Read_String &rArr; SPI1_ReadWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_MutBlock_Reg_Record
<LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Abnormal_Ans_Process
</UL>
<BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dev_Frame_Handle_Self_Comm
</UL>

<P><STRONG><a name="[d9]"></a>Read_MutBlock_Reg_Record</STRONG> (Thumb, 384 bytes, Stack size 544 bytes, pc_comm.o(i.Read_MutBlock_Reg_Record))
<BR><BR>[Stack]<UL><LI>Max Depth = 1392<LI>Call Chain = Read_MutBlock_Reg_Record &rArr; Flash_Load_Info &rArr; Valid_FlashData &rArr; Flash_Read_3String &rArr; Flash_Read_String &rArr; SPI1_ReadWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_Load_Info
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ans_Process_Normal
<LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Abnormal_Ans_Process
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_MutBlock_Reg
</UL>

<P><STRONG><a name="[67]"></a>Read_Special_Comm</STRONG> (Thumb, 254 bytes, Stack size 184 bytes, pc_comm.o(i.Read_Special_Comm))
<BR><BR>[Stack]<UL><LI>Max Depth = 1216<LI>Call Chain = Read_Special_Comm &rArr; Find_Module_Msg &rArr; Read_Module_Info &rArr; get_record &rArr; Flash_Load_Info &rArr; Valid_FlashData &rArr; Flash_Read_3String &rArr; Flash_Read_String &rArr; SPI1_ReadWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemoryCpyInvert
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Slave_Info_Send
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Find_Module_Msg
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Find_Info_Upload
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_Event_To_TransEq
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ans_Process_Poll_Normal
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ans_Process_Normal
<LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Abnormal_Ans_Process
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dev_Frame_Handle_Self_Comm
</UL>

<P><STRONG><a name="[53]"></a>Record_Controler_If_Event</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, record_status.o(i.Record_Controler_If_Event))
<BR><BR>[Stack]<UL><LI>Max Depth = 4408<LI>Call Chain = Record_Controler_If_Event &rArr; Record_Save &rArr; Flash_Blank_Check &rArr; Flash_Read_3String &rArr; Flash_Read_String &rArr; SPI1_ReadWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Record_Save
</UL>
<BR>[Called By]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Controller_Com_Event_Save
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Save_Trans_Equip_Info
</UL>

<P><STRONG><a name="[dd]"></a>Record_Save</STRONG> (Thumb, 250 bytes, Stack size 16 bytes, record_manage.o(i.Record_Save))
<BR><BR>[Stack]<UL><LI>Max Depth = 4400<LI>Call Chain = Record_Save &rArr; Flash_Blank_Check &rArr; Flash_Read_3String &rArr; Flash_Read_String &rArr; SPI1_ReadWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Get_PowerOff_Time
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemoryCpyInvert
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_Save_Info
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_RTC_Time
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_Erase_3Addr
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_Blank_Check
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Record_Controler_If_Event
</UL>

<P><STRONG><a name="[de]"></a>Recover_Factory_Set</STRONG> (Thumb, 114 bytes, Stack size 8 bytes, sys_init.o(i.Recover_Factory_Set))
<BR><BR>[Stack]<UL><LI>Max Depth = 1984<LI>Call Chain = Recover_Factory_Set &rArr; Flash_Save_Info &rArr; Flash_RWrite_String &rArr; Flash_Write_String &rArr; Flash_Page_Program &rArr; Flash_Read_String &rArr; SPI1_ReadWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_Save_Info
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delete_All_Record
<LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_Byte_Reg
</UL>

<P><STRONG><a name="[82]"></a>SPI1_ReadWriteByte</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, ex_flash.o(i.SPI1_ReadWriteByte))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SPI1_ReadWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_SendData8
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_ReceiveData8
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_I2S_GetFlagStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_Read_String
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_Sector_Erase
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_disable_Write
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_Read_Status_Register
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_Page_Program
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_Enable_Write
</UL>

<P><STRONG><a name="[e4]"></a>SPI_Cmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f0xx_spi.o(i.SPI_Cmd))
<BR><BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Flash_Init
</UL>

<P><STRONG><a name="[85]"></a>SPI_Flash_Init</STRONG> (Thumb, 218 bytes, Stack size 32 bytes, ex_flash.o(i.SPI_Flash_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = SPI_Flash_Init &rArr; GPIO_PinAFConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinAFConfig
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_RxFIFOThresholdConfig
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Init
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Cmd
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHBPeriphClockCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_Init
</UL>

<P><STRONG><a name="[df]"></a>SPI_I2S_GetFlagStatus</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f0xx_spi.o(i.SPI_I2S_GetFlagStatus))
<BR><BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI1_ReadWriteByte
</UL>

<P><STRONG><a name="[e3]"></a>SPI_Init</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, stm32f0xx_spi.o(i.SPI_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SPI_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Flash_Init
</UL>

<P><STRONG><a name="[e1]"></a>SPI_ReceiveData8</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f0xx_spi.o(i.SPI_ReceiveData8))
<BR><BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI1_ReadWriteByte
</UL>

<P><STRONG><a name="[e2]"></a>SPI_RxFIFOThresholdConfig</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f0xx_spi.o(i.SPI_RxFIFOThresholdConfig))
<BR><BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Flash_Init
</UL>

<P><STRONG><a name="[e0]"></a>SPI_SendData8</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f0xx_spi.o(i.SPI_SendData8))
<BR><BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI1_ReadWriteByte
</UL>

<P><STRONG><a name="[bd]"></a>SYSCFG_EXTILineConfig</STRONG> (Thumb, 60 bytes, Stack size 12 bytes, stm32f0xx_syscfg.o(i.SYSCFG_EXTILineConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = SYSCFG_EXTILineConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Parallel_Port_EXTI_Init
</UL>

<P><STRONG><a name="[ac]"></a>SYSCFG_MemoryRemapConfig</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f0xx_syscfg.o(i.SYSCFG_MemoryRemapConfig))
<BR><BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;McuCoreConfig
</UL>

<P><STRONG><a name="[9d]"></a>Save_Fault_Info_EI_PRT_B</STRONG> (Thumb, 1798 bytes, Stack size 328 bytes, ei_print_comm.o(i.Save_Fault_Info_EI_PRT_B))
<BR><BR>[Stack]<UL><LI>Max Depth = 448<LI>Call Chain = Save_Fault_Info_EI_PRT_B &rArr; Do_Event_Upload &rArr; TS_Send_Event &rArr; MemoryCpyInvert &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemoryCpyInvert
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hex2BCD
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_RTC_Time
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Watch_Dog
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hex_To_BasicUC
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strstr
<LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Do_Event_Upload
</UL>
<BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Handle_Ei_Pri_B
</UL>

<P><STRONG><a name="[9c]"></a>Save_Fire_Info_EI_PRT_B</STRONG> (Thumb, 1620 bytes, Stack size 328 bytes, ei_print_comm.o(i.Save_Fire_Info_EI_PRT_B))
<BR><BR>[Stack]<UL><LI>Max Depth = 448<LI>Call Chain = Save_Fire_Info_EI_PRT_B &rArr; Do_Event_Upload &rArr; TS_Send_Event &rArr; MemoryCpyInvert &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemoryCpyInvert
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hex2BCD
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Watch_Dog
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hex_To_BasicUC
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strstr
<LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Do_Event_Upload
</UL>
<BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Handle_Ei_Pri_B
</UL>

<P><STRONG><a name="[b8]"></a>Save_Trans_Equip_Info</STRONG> (Thumb, 74 bytes, Stack size 136 bytes, controller.o(i.Save_Trans_Equip_Info))
<BR><BR>[Stack]<UL><LI>Max Depth = 4544<LI>Call Chain = Save_Trans_Equip_Info &rArr; Record_Controler_If_Event &rArr; Record_Save &rArr; Flash_Blank_Check &rArr; Flash_Read_3String &rArr; Flash_Read_String &rArr; SPI1_ReadWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemoryCpyInvert
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Record_Controler_If_Event
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Monitor_Trans_Equip_Fault_Eliminate
</UL>

<P><STRONG><a name="[dc]"></a>Send_Event_To_TransEq</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, pc_comm.o(i.Send_Event_To_TransEq))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = Send_Event_To_TransEq &rArr; Uart_Slaves_Init_Send &rArr; Caculate_CRC
</UL>
<BR>[Calls]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_Slaves_Init_Send
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_Special_Comm
</UL>

<P><STRONG><a name="[e6]"></a>Set_RTC_Time</STRONG> (Thumb, 74 bytes, Stack size 48 bytes, rtc.o(i.Set_RTC_Time))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = Set_RTC_Time &rArr; RTC_TimeRegulate &rArr; RTC_SetTime &rArr; RTC_WaitForSynchro
</UL>
<BR>[Calls]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_TimeRegulate
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BCD2Hex
</UL>
<BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_Mul_Byte_Reg
</UL>

<P><STRONG><a name="[db]"></a>Slave_Info_Send</STRONG> (Thumb, 482 bytes, Stack size 16 bytes, ts.o(i.Slave_Info_Send))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = Slave_Info_Send &rArr; MemoryCpyInvert &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemoryCpyInvert
<LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Slave_Prepare_Answer
</UL>
<BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_Special_Comm
</UL>

<P><STRONG><a name="[e8]"></a>Slave_Prepare_Answer</STRONG> (Thumb, 120 bytes, Stack size 24 bytes, ts.o(i.Slave_Prepare_Answer))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = Slave_Prepare_Answer &rArr; Caculate_CRC
</UL>
<BR>[Calls]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Caculate_CRC
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Slave_Info_Send
</UL>

<P><STRONG><a name="[ba]"></a>Soft_Reset</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, sys_init.o(i.Soft_Reset))
<BR><BR>[Called By]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Monitor_Updata
</UL>

<P><STRONG><a name="[25]"></a>SystemInit</STRONG> (Thumb, 130 bytes, Stack size 8 bytes, system_stm32f0xx.o(i.SystemInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = SystemInit &rArr; SetSysClock
</UL>
<BR>[Calls]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSysClock
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f0xx.o(.text)
</UL>
<P><STRONG><a name="[ea]"></a>System_Initialize</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, sys_init.o(i.System_Initialize))
<BR><BR>[Stack]<UL><LI>Max Depth = 2000<LI>Call Chain = System_Initialize &rArr; Mcu_Data_Init &rArr; Init_Config &rArr; Flash_Save_Info &rArr; Flash_RWrite_String &rArr; Flash_Write_String &rArr; Flash_Page_Program &rArr; Flash_Read_String &rArr; SPI1_ReadWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mcu_Hard_Init
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mcu_Data_Init
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;McuCoreConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[18]"></a>TIM14_IRQHandler</STRONG> (Thumb, 146 bytes, Stack size 8 bytes, timer.o(i.TIM14_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = TIM14_IRQHandler &rArr; TIM_GetITStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Monitor_Led
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Monitor_Controller_Uart_Timer_Run
<LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_GetITStatus
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ClearITPendingBit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f0xx.o(RESET)
</UL>
<P><STRONG><a name="[c4]"></a>TIM_BDTRConfig</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, stm32f0xx_tim.o(i.TIM_BDTRConfig))
<BR><BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Power_485_Init
</UL>

<P><STRONG><a name="[ec]"></a>TIM_ClearITPendingBit</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f0xx_tim.o(i.TIM_ClearITPendingBit))
<BR><BR>[Called By]<UL><LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM14_IRQHandler
</UL>

<P><STRONG><a name="[c5]"></a>TIM_Cmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f0xx_tim.o(i.TIM_Cmd))
<BR><BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Power_485_Init
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer14_Init
</UL>

<P><STRONG><a name="[c6]"></a>TIM_CtrlPWMOutputs</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, stm32f0xx_tim.o(i.TIM_CtrlPWMOutputs))
<BR><BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Power_485_Init
</UL>

<P><STRONG><a name="[eb]"></a>TIM_GetITStatus</STRONG> (Thumb, 38 bytes, Stack size 12 bytes, stm32f0xx_tim.o(i.TIM_GetITStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = TIM_GetITStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM14_IRQHandler
</UL>

<P><STRONG><a name="[f0]"></a>TIM_ITConfig</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f0xx_tim.o(i.TIM_ITConfig))
<BR><BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer14_Init
</UL>

<P><STRONG><a name="[c1]"></a>TIM_OC1Init</STRONG> (Thumb, 122 bytes, Stack size 16 bytes, stm32f0xx_tim.o(i.TIM_OC1Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = TIM_OC1Init
</UL>
<BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Power_485_Init
</UL>

<P><STRONG><a name="[c2]"></a>TIM_OC2Init</STRONG> (Thumb, 130 bytes, Stack size 16 bytes, stm32f0xx_tim.o(i.TIM_OC2Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = TIM_OC2Init
</UL>
<BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Power_485_Init
</UL>

<P><STRONG><a name="[c3]"></a>TIM_OC3Init</STRONG> (Thumb, 124 bytes, Stack size 16 bytes, stm32f0xx_tim.o(i.TIM_OC3Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = TIM_OC3Init
</UL>
<BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Power_485_Init
</UL>

<P><STRONG><a name="[c0]"></a>TIM_TimeBaseInit</STRONG> (Thumb, 90 bytes, Stack size 0 bytes, stm32f0xx_tim.o(i.TIM_TimeBaseInit))
<BR><BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Power_485_Init
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer14_Init
</UL>

<P><STRONG><a name="[ef]"></a>TS_Get_Controller_Data</STRONG> (Thumb, 122 bytes, Stack size 24 bytes, ts.o(i.TS_Get_Controller_Data))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = TS_Get_Controller_Data &rArr; MemoryCpyInvert &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemoryCpyInvert
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_Special_Comm
</UL>

<P><STRONG><a name="[76]"></a>TS_Send_Event</STRONG> (Thumb, 248 bytes, Stack size 40 bytes, ei_print_comm.o(i.TS_Send_Event))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = TS_Send_Event &rArr; MemoryCpyInvert &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemoryCpyInvert
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Caculate_CRC
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Do_Event_Upload
</UL>

<P><STRONG><a name="[5b]"></a>TS_Send_Heart_Poll</STRONG> (Thumb, 216 bytes, Stack size 24 bytes, ei_print_comm.o(i.TS_Send_Heart_Poll))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = TS_Send_Heart_Poll &rArr; Caculate_CRC
</UL>
<BR>[Calls]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Caculate_CRC
</UL>
<BR>[Called By]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Data_Deal_Task
</UL>

<P><STRONG><a name="[af]"></a>Timer14_Init</STRONG> (Thumb, 74 bytes, Stack size 32 bytes, timer.o(i.Timer14_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = Timer14_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphClockCmd
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_TimeBaseInit
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ITConfig
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mcu_Hard_Init
</UL>

<P><STRONG><a name="[21]"></a>USART2_IRQHandler</STRONG> (Thumb, 86 bytes, Stack size 8 bytes, uart.o(i.USART2_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = USART2_IRQHandler &rArr; Controller_Uart_Send_Data &rArr; RS232_Uart_Init &rArr; USART_ITConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Controller_Uart_Send_Data
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Controller_Uart_Rec_Data
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetITStatus
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f0xx.o(RESET)
</UL>
<P><STRONG><a name="[c8]"></a>USART_Cmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f0xx_usart.o(i.USART_Cmd))
<BR><BR>[Called By]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RS485_Uart_Init
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RS232_Uart_Init
</UL>

<P><STRONG><a name="[f1]"></a>USART_GetITStatus</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, stm32f0xx_usart.o(i.USART_GetITStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = USART_GetITStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_IRQHandler
</UL>

<P><STRONG><a name="[c7]"></a>USART_ITConfig</STRONG> (Thumb, 66 bytes, Stack size 24 bytes, stm32f0xx_usart.o(i.USART_ITConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = USART_ITConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RS485_Uart_Init
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RS232_Uart_Init
</UL>

<P><STRONG><a name="[32]"></a>Uart_Slave_Prepare_Send</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, pc_comm.o(i.Uart_Slave_Prepare_Send))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = Uart_Slave_Prepare_Send &rArr; Uart_Slaves_Init_Send &rArr; Caculate_CRC
</UL>
<BR>[Calls]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_Slaves_Init_Send
</UL>
<BR>[Called By]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ans_Process_Poll_Normal
<LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Abnormal_Ans_Process
</UL>

<P><STRONG><a name="[38]"></a>Uart_Slaves_Init_Send</STRONG> (Thumb, 158 bytes, Stack size 24 bytes, pc_comm.o(i.Uart_Slaves_Init_Send))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = Uart_Slaves_Init_Send &rArr; Caculate_CRC
</UL>
<BR>[Calls]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Caculate_CRC
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_Slave_Prepare_Send
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_Event_To_TransEq
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ans_Updata_Normal
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ans_Process_Normal
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ans_Process_Comm_Ans
</UL>

<P><STRONG><a name="[74]"></a>Uchar_To_Uint16</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, basic.o(i.Uchar_To_Uint16))
<BR><BR>[Called By]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dev_Reg_Mode_NBLOCK
</UL>

<P><STRONG><a name="[87]"></a>Valid_FlashData</STRONG> (Thumb, 134 bytes, Stack size 24 bytes, ex_flash.o(i.Valid_FlashData))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = Valid_FlashData &rArr; Flash_Read_3String &rArr; Flash_Read_String &rArr; SPI1_ReadWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Watch_Dog
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_Read_3String
</UL>
<BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_Load_Info
</UL>

<P><STRONG><a name="[35]"></a>Watch_Dog</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, sys_init.o(i.Watch_Dog))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Watch_Dog
</UL>
<BR>[Calls]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IWDG_ReloadCounter
</UL>
<BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delete_All_Record
<LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_Read_3String
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_Erase_3Addr
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_Blank_Check
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_Write_String
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_Sector_Erase
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Monitor_Updata
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Save_Fire_Info_EI_PRT_B
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Save_Fault_Info_EI_PRT_B
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Parall_Data_Analyse
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_Module_Info
<LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Analyse_Info_TS
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Valid_FlashData
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Item_To_Wr
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_RWrite_String
</UL>

<P><STRONG><a name="[68]"></a>Write_Bit_Reg</STRONG> (Thumb, 248 bytes, Stack size 16 bytes, pc_comm.o(i.Write_Bit_Reg))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = Write_Bit_Reg &rArr; Abnormal_Ans_Process &rArr; Uart_Slave_Prepare_Send &rArr; Uart_Slaves_Init_Send &rArr; Caculate_CRC
</UL>
<BR>[Calls]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ans_Process_Normal
<LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Abnormal_Ans_Process
</UL>
<BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dev_Frame_Handle_Self_Comm
</UL>

<P><STRONG><a name="[6a]"></a>Write_Byte_Reg</STRONG> (Thumb, 734 bytes, Stack size 16 bytes, pc_comm.o(i.Write_Byte_Reg))
<BR><BR>[Stack]<UL><LI>Max Depth = 2000<LI>Call Chain = Write_Byte_Reg &rArr; Recover_Factory_Set &rArr; Flash_Save_Info &rArr; Flash_RWrite_String &rArr; Flash_Write_String &rArr; Flash_Page_Program &rArr; Flash_Read_String &rArr; SPI1_ReadWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Contr_485Uart_Sta_Switch
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Contr_485Uart_Init
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Contr_232Uart_Sta_Switch
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Contr_232Uart_Init
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_Save_Info
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_Load_Info
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delete_All_Record
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Recover_Factory_Set
<LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Change_Byte
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ans_Process_Normal
<LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Abnormal_Ans_Process
</UL>
<BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dev_Frame_Handle_Self_Comm
</UL>

<P><STRONG><a name="[6c]"></a>Write_Mul_Byte_Reg</STRONG> (Thumb, 1496 bytes, Stack size 24 bytes, pc_comm.o(i.Write_Mul_Byte_Reg))
<BR><BR>[Stack]<UL><LI>Max Depth = 2000<LI>Call Chain = Write_Mul_Byte_Reg &rArr; Flash_Save_Info &rArr; Flash_RWrite_String &rArr; Flash_Write_String &rArr; Flash_Page_Program &rArr; Flash_Read_String &rArr; SPI1_ReadWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_RTC_Time
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemoryCpyInvert
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_Save_Info
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_RTC_Time
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ans_Process_Normal
<LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Abnormal_Ans_Process
<LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dev_Frame_Handle_Self_Comm
</UL>

<P><STRONG><a name="[6e]"></a>Write_MutBlock_Reg</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, pc_comm.o(i.Write_MutBlock_Reg))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = Write_MutBlock_Reg &rArr; Abnormal_Ans_Process &rArr; Uart_Slave_Prepare_Send &rArr; Uart_Slaves_Init_Send &rArr; Caculate_CRC
</UL>
<BR>[Calls]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Abnormal_Ans_Process
</UL>
<BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dev_Frame_Handle_Self_Comm
</UL>

<P><STRONG><a name="[66]"></a>Write_Special_Comm</STRONG> (Thumb, 1318 bytes, Stack size 48 bytes, pc_comm.o(i.Write_Special_Comm))
<BR><BR>[Stack]<UL><LI>Max Depth = 4592<LI>Call Chain = Write_Special_Comm &rArr; Controller_Com_Event_Save &rArr; Record_Controler_If_Event &rArr; Record_Save &rArr; Flash_Blank_Check &rArr; Flash_Read_3String &rArr; Flash_Read_String &rArr; SPI1_ReadWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;On_Led_SEND
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;On_Led_Error
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;On_Led_Contor
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Off_Led_Error
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Off_Led_Contor
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Off_Led_SEND
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TS_Get_Controller_Data
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_Write_String
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Controller_Com_Event_Save
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ans_Updata_Normal
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ans_Process_Normal
<LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Abnormal_Ans_Process
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memmove
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dev_Frame_Handle_Self_Comm
</UL>

<P><STRONG><a name="[f7]"></a>__0sprintf$1</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, printf1.o(i.__0sprintf$1), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sputc
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[10b]"></a>__1sprintf$1</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printf1.o(i.__0sprintf$1), UNUSED)

<P><STRONG><a name="[e5]"></a>__2sprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printf1.o(i.__0sprintf$1))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Save_Trans_Equip_Info
</UL>

<P><STRONG><a name="[34]"></a>__ARM_common_switch8</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, timer.o(i.__ARM_common_switch8))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __ARM_common_switch8
</UL>
<BR>[Called By]<UL><LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM14_IRQHandler
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Per_Second_Event_Deal
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_Byte_Reg
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dev_Frame_Analyse
<LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Analyse_Info_TS
</UL>

<P><STRONG><a name="[10c]"></a>__scatterload_copy</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_copy), UNUSED)

<P><STRONG><a name="[10d]"></a>__scatterload_null</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_null), UNUSED)

<P><STRONG><a name="[10e]"></a>__scatterload_zeroinit</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_zeroinit), UNUSED)

<P><STRONG><a name="[fb]"></a>addr_ID_compare</STRONG> (Thumb, 446 bytes, Stack size 24 bytes, basic.o(i.addr_ID_compare))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = addr_ID_compare
</UL>
<BR>[Called By]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;addr_compare
</UL>

<P><STRONG><a name="[f9]"></a>addr_LA_compare</STRONG> (Thumb, 42 bytes, Stack size 12 bytes, basic.o(i.addr_LA_compare))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = addr_LA_compare
</UL>
<BR>[Called By]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;addr_compare
</UL>

<P><STRONG><a name="[fa]"></a>addr_UC_compare</STRONG> (Thumb, 108 bytes, Stack size 12 bytes, basic.o(i.addr_UC_compare))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = addr_UC_compare
</UL>
<BR>[Called By]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;addr_compare
</UL>

<P><STRONG><a name="[62]"></a>addr_compare</STRONG> (Thumb, 82 bytes, Stack size 36 bytes, basic.o(i.addr_compare))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = addr_compare &rArr; addr_ID_compare
</UL>
<BR>[Calls]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;addr_UC_compare
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;addr_LA_compare
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;addr_ID_compare
</UL>
<BR>[Called By]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dev_Frame_Analyse
</UL>

<P><STRONG><a name="[d7]"></a>get_record</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, record_manage.o(i.get_record))
<BR><BR>[Stack]<UL><LI>Max Depth = 864<LI>Call Chain = get_record &rArr; Flash_Load_Info &rArr; Valid_FlashData &rArr; Flash_Read_3String &rArr; Flash_Read_String &rArr; SPI1_ReadWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_Load_Info
</UL>
<BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_Module_Info
</UL>

<P><STRONG><a name="[24]"></a>main</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, main.o(i.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 4632<LI>Call Chain = main &rArr; Controller_Com &rArr; RS485_Task &rArr; Com_Task_TS &rArr; Dev_Frame_Handle &rArr; Dev_Frame_Handle_Self_Comm &rArr; Write_Special_Comm &rArr; Controller_Com_Event_Save &rArr; Record_Controler_If_Event &rArr; Record_Save &rArr; Flash_Blank_Check &rArr; Flash_Read_3String &rArr; Flash_Read_String &rArr; SPI1_ReadWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Watch_Dog
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;System_Initialize
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Monitor_Task
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Data_Deal_Task
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Controller_Com
</UL>
<BR>[Address Reference Count : 1]<UL><LI> entry9a.o(.ARM.Collect$$$$0000000B)
</UL><P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[ca]"></a>RTC_Bcd2ToByte</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f0xx_rtc.o(i.RTC_Bcd2ToByte))
<BR><BR>[Called By]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_SetTime
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_SetDate
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_GetTime
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_GetDate
</UL>

<P><STRONG><a name="[cf]"></a>RTC_ByteToBcd2</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, stm32f0xx_rtc.o(i.RTC_ByteToBcd2))
<BR><BR>[Called By]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_SetTime
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_SetDate
</UL>

<P><STRONG><a name="[e9]"></a>SetSysClock</STRONG> (Thumb, 206 bytes, Stack size 12 bytes, system_stm32f0xx.o(i.SetSysClock))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = SetSysClock
</UL>
<BR>[Called By]<UL><LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[f8]"></a>_printf_core</STRONG> (Thumb, 332 bytes, Stack size 88 bytes, printf1.o(i._printf_core), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sprintf$1
</UL>

<P><STRONG><a name="[27]"></a>_sputc</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, printf1.o(i._sputc))
<BR><BR>[Called By]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sprintf$1
</UL>
<BR>[Address Reference Count : 1]<UL><LI> printf1.o(i.__0sprintf$1)
</UL><P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
